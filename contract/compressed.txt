pragma solidity ^0.4.11;

library SafeMath { function mul(uint256 a, uint256 b) internal returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; }

 function div(uint256 a, uint256 b) internal returns (uint256) { uint256 c = a / b; return c; }

 function sub(uint256 a, uint256 b) internal returns (uint256) { assert(b <= a); return a - b; }

 function add(uint256 a, uint256 b) internal returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }

 function max64(uint64 a, uint64 b) internal constant returns (uint64) { return a >= b ? a : b; }

 function min64(uint64 a, uint64 b) internal constant returns (uint64) { return a < b ? a : b; }

 function max256(uint256 a, uint256 b) internal constant returns (uint256) { return a >= b ? a : b; }

 function min256(uint256 a, uint256 b) internal constant returns (uint256) { return a < b ? a : b; }

}

contract ERC20Basic { uint256 public totalSupply; function balanceOf(address who) constant returns (uint256); function transfer(address to, uint256 value); event Transfer(address indexed from, address indexed to, uint256 value); }

contract ERC20 is ERC20Basic { function allowance(address owner, address spender) constant returns (uint256); function transferFrom(address from, address to, uint256 value); function approve(address spender, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); }

contract BasicToken is ERC20Basic { using SafeMath for uint256;

 mapping(address => uint256) balances;

 function transfer(address _to, uint256 _value) { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); }

 function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; } }
